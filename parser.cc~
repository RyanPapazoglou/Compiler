/*
  Ryan Papazoglou
  rpp219
  CSE109
  Program 5
  Desc: Parser class to build the tree for assembly use
*/

#include "parser.h"
#include <cstring>


Parser::Parser(Lexer& lexerx, ostream& outx): lexer(lexerx), out(outx), lindex(1), tindex(1) {
  token = lexer.nextToken();
}

Parser::~Parser() {
}

void Parser::error(string message) {
  cerr << message << " Found " << token.lexeme() << " at line " << token.line() << " position " << token.pos() << endl;
  exit(1);
}

void Parser::check(int tokenType, string message) {
  if (token.type() != tokenType)
    error(message);
}

Parser::TreeNode* Parser::factor() {
  int tokenType = Token.getType();
  TreeNode* factor = NULL;
  check(Token::LPAREN, "Expecting (");
  
  switch(tokenType){
  case Token::IDENT:
    factor = new TreeNode(PUSHV, token.lex);
    token = lexer.nextToken();
    return node;
    break;
  case Token::INTLIT:
    factor = new TreeNode(PUSHL, token.lex);
    token = lexer.nextToken();
    return node;
    break;
  default:
    factor = expression();
    token = lexer.nextToken();
    return factor;
  }
  check(Token::RPAREN, "Expecting )");
}

Parser::TreeNode* Parser::term() {
}

Parser::TreeNode* Parser::expression() {
}

Parser::TreeNode* Parser::relationalExpression() {
}

Parser::TreeNode* Parser::logicalExpression() {
}
